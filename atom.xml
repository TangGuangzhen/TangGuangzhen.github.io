<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小唐人博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://tangguangzhen.github.io/"/>
  <updated>2019-07-08T11:52:02.206Z</updated>
  <id>https://tangguangzhen.github.io/</id>
  
  <author>
    <name>tgz</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>操作系统</title>
    <link href="https://tangguangzhen.github.io/2019/07/08/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    <id>https://tangguangzhen.github.io/2019/07/08/操作系统/</id>
    <published>2019-07-08T09:28:34.000Z</published>
    <updated>2019-07-08T11:52:02.206Z</updated>
    
    <content type="html"><![CDATA[<h1 id="进程与线程"><a href="#进程与线程" class="headerlink" title="进程与线程"></a>进程与线程</h1><p>区别联系：<br>1.进程是系统资源分配的最小单位，线程是程序执行的最小单位；<br>2.进程使用独立的数据空间，线程共享进程的数据空间。</p><h1 id="线程调度算法"><a href="#线程调度算法" class="headerlink" title="线程调度算法"></a>线程调度算法</h1><p>1.时间片轮转调度<br>2.先来先服务调度<br>3.优先级调度<br>4.多级反馈队列调度<br>5.高响应比优先调度</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;进程与线程&quot;&gt;&lt;a href=&quot;#进程与线程&quot; class=&quot;headerlink&quot; title=&quot;进程与线程&quot;&gt;&lt;/a&gt;进程与线程&lt;/h1&gt;&lt;p&gt;区别联系：&lt;br&gt;1.进程是系统资源分配的最小单位，线程是程序执行的最小单位；&lt;br&gt;2.进程使用独立的数据空间，线
      
    
    </summary>
    
      <category term="操作系统" scheme="https://tangguangzhen.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="操作系统" scheme="https://tangguangzhen.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>Linux系统基本操作</title>
    <link href="https://tangguangzhen.github.io/2019/07/06/Linux%E7%B3%BB%E7%BB%9F%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    <id>https://tangguangzhen.github.io/2019/07/06/Linux系统基本操作/</id>
    <published>2019-07-06T07:08:55.000Z</published>
    <updated>2019-07-07T06:14:43.344Z</updated>
    
    <content type="html"><![CDATA[<h1 id="常考的Linux命令"><a href="#常考的Linux命令" class="headerlink" title="常考的Linux命令"></a>常考的Linux命令</h1><a id="more"></a><h2 id="cd"><a href="#cd" class="headerlink" title="cd"></a>cd</h2><p>用于切换当前目录，它的参数是要切换到的目录的路径，可以是绝对路径，也可以是相对路径。</p><blockquote><p><strong>cd /root/runoob/</strong> ：绝对路径<br><strong>cd ./runoob/</strong> ：相对路径 </p></blockquote><h2 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h2><p>查看文件与目录的命令</p><blockquote><p><strong>ls -l</strong> (也可以直接 ll ) ：列出长数据串，包含文件的属性与权限数据等<br><strong>ls -a</strong> ：列出全部的文件，连同隐藏文件（开头为.的文件）一起列出来（常用） </p></blockquote><h2 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h2><p>文本搜索 </p><blockquote><p>语法：grep 参数 查找条件 文件名（注：是文件名，目录名下查找不行）<br>主要参数：<br><strong>－i</strong>：不区分大小写(只适用于字母字符。）<br><strong>－l</strong>：查询多文件时只输出包含匹配字符的文件名。<br><strong>－n</strong>：显示匹配行内容及行号。<br>比如我的/opt目录下有文件test1.txt<br><strong>grep -i “teacher” test1.txt</strong> : 查询包含 teacher 文本的所有行并打印在屏幕上<br><strong>grep -l “teacher” test1.txt test2.txt</strong> : 在文件test1/test2中查找是否有“teacher”<br><strong>grep teacher *.txt</strong> : 显示当前目录下包含“teacher”且以.txt 结尾的文件（grep命令支持正则表达式，如  <strong>grep ‘[a-z]{7}‘ *.txt）</strong><br><strong>ps -ef | grep java</strong>：查找指定进程(这里指定java进程)<br><strong>ls -l | grep -i test</strong>：把ls -l的输出中包含字母test（不区分大小写）的内容输出 （如果查询的是目录可以使用正则表达式，但是文件不行） </p></blockquote><h2 id="find"><a href="#find" class="headerlink" title="find"></a>find</h2><p>查找</p><blockquote><p><strong>-mtime +n</strong> : 列出在n天之前（不含n天本身）被更改过的文件名；<br><strong>-mtime -n</strong> : 列出在n天之内（含n天本身）被更改过的文件名；<br><strong>find /root（路径） -mtime 0</strong> ： 在当前目录下查找今天之内有改动的文件<br><strong>find -name 文件名</strong> ：找匹配的文件名<br>在某一文件中查找日志（比方方法login）:可以vi打开日志文件，然后“/login”，enter，按 n 键向下继续搜索； </p></blockquote><h2 id="mkdir"><a href="#mkdir" class="headerlink" title="mkdir"></a>mkdir</h2><p>创建指定的名称的目录</p><blockquote><p><strong>-m</strong>, –mode=模式，设定权限&lt;模式&gt; (类似 chmod)，而不是 rwxrwxrwx 减 umask<br><strong>-p</strong>, –parents  可以是一个路径名称。此时若路径中的某些目录尚不存在,加上此选项后,系统将自动建立好那些尚不存在的目录,即一次可以建立多个目录;<br><strong>mkdir test1</strong> ： 创建一个空目录<br><strong>mkdir -p test2/test22</strong> ：递归创建多个目录<br><strong>mkdir -m 777 test3</strong> ：创建权限为777的目录  </p></blockquote><h2 id="cp"><a href="#cp" class="headerlink" title="cp"></a>cp</h2><p>复制文件，还可以把多个文件一次性地复制到一个目录下</p><blockquote><p><strong>cp -a file1 file2</strong> ：连同文件的所有特性把文件file1复制成文件file2<br><strong>cp file1 file2 file3 dir</strong> ：把文件file1、file2、file3复制到目录dir中   </p></blockquote><h2 id="mv"><a href="#mv" class="headerlink" title="mv"></a>mv</h2><p>移动文件、目录或更名</p><blockquote><p><strong>mv file1 file2 file3 dir</strong> : 把文件file1、file2、file3移动到目录dir中<br><strong>mv file1 file2</strong> : 把文件file1重命名为file2   </p></blockquote><h2 id="rm"><a href="#rm" class="headerlink" title="rm"></a>rm</h2><p>删除文件或目录</p><blockquote><p><strong>-f</strong>：就是force的意思，忽略不存在的文件，不会出现警告消息<br><strong>-i</strong>：互动模式，在删除前会询问用户是否操作<br><strong>-r</strong>：递归删除，最常用于目录删除，它是一个非常危险的参数<br><strong>rm -i file</strong> : 删除文件file，在删除之前会询问是否进行该操作<br><strong>rm -fr dir</strong> : 强制删除目录dir中的所有文件   </p></blockquote><h2 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h2><p>列出系统中当前运行的进程</p><blockquote><p><strong>a</strong> 显示所有用户的所有进程（包括其它用户）<br><strong>-e</strong> 显示所有进程,环境变量<br><strong>f</strong> 用树形格式来显示进程；<br><strong>ps -ef | grep java</strong> ： 找出所有java进程 </p></blockquote><h2 id="kill"><a href="#kill" class="headerlink" title="kill"></a>kill</h2><p>终止指定的进程。需要先使用ps/pidof/pstree/top等工具获取进程PID，然后使用kill命令来杀掉该进程。</p><blockquote><p><strong>kill -9 进程号</strong> ： 彻底杀死某个进程 </p></blockquote><h2 id="tar"><a href="#tar" class="headerlink" title="tar"></a>tar</h2><p>对文件进行打包，默认情况并不会压缩，如果指定了相应的参数，它还会调用相应的压缩程序（如gzip和bzip等）进行压缩和解压。 </p><blockquote><p>语法：<strong>tar [主选项+辅选项] 文件或者目录</strong><br>使用该命令时，主选项是必须要有的，它告诉tar要做什么事情，辅选项是辅助使用的，可以选用。 　</p></blockquote><p>主选项：</p><blockquote><p><strong>c</strong> 创建新的档案文件。如果用户想备份一个目录或是一些文件，就要选择这个选项。相当于打包。<br><strong>x</strong> 从档案文件中释放文件。相当于拆包。<br><strong>t</strong> 列出档案文件的内容，查看已经备份了哪些文件。<br>**在参数的下达中， c/x/t 仅能存在一个！不可同时存在！因为不可能同时压缩与解压缩。</p></blockquote><p>辅助选项：</p><blockquote><p><strong>-z</strong> ：是否同时具有 gzip 的属性？亦即是否需要用 gzip 压缩或解压？ 一般格式为xx.tar.gz或xx. tgz<br><strong>-j</strong> ：是否同时具有 bzip2 的属性？亦即是否需要用 bzip2 压缩或解压？一般格式为xx.tar.bz2<br><strong>-v</strong> ：压缩的过程中显示文件！这个常用<br><strong>-f</strong> ：使用档名，请留意，在 f 之后要立即接档名喔！不要再加其他参数！<br><strong>-p</strong> ：使用原文件的原来属性（属性不会依据使用者而变）<br><strong>–exclude FILE</strong>：在压缩的过程中，不要将 FILE 打包！<br>压缩：tar -jcv -f filename.tar.bz2 filename<br>查询：tar -jtv -f filename.tar.bz2<br>解压：tar -jxv -f filename.tar.bz2 (解压成目录为filename的目录)<br>注：文件名并不定要以后缀tar.bz2结尾，这里主要是为了说明使用的压缩程序为bzip2 </p></blockquote><h2 id="chmod"><a href="#chmod" class="headerlink" title="chmod"></a>chmod</h2><p>改变文件的权限 </p><blockquote><p>语法：chmod [options] mode files<br>options：-R 可递归遍历子目录，把修改应到目录下所有文件和子目录<br>who：u 用户 、 g 组 、o 其他 、a 所有用户<br>opcode：+ 增加权限 、 - 删除权限 、= 重新分配权限<br>permission： r 读 、w 写 、 x 执行<br>我们多数用三位八进制数字的形式来表示权限，第一位指定属主的权限，第二位指定组权限，第三位指定其他用户的权限，每位通过4(读)、2(写)、1(执行)三种数值的和来确定权限。如6(4+2)代表有读写权，7(4+2+1)有读、写和执行的权限<br>chmod u+x file ：给file的属主增加执行权限<br>chmod 751 file ：给file的属主分配读、写、执行(7)的权限，给file的所在组分配读、执行(5)的权限，给其他用户分配执行(1)的权限<br>chmod u=rwx,g=rx,o=x file ：上例的另一种形式 </p></blockquote><h2 id="tail"><a href="#tail" class="headerlink" title="tail"></a>tail</h2><p>查阅正在改变的日志文件 </p><blockquote><p>语法：tail[必要参数][选择参数][文件]<br><strong>-f</strong> 循环读取<br><strong>-n&lt;行数&gt;</strong> 显示行数<br><strong>tail -f 20160921.logs</strong> ：查看正在改变的日志文件；<br><strong>tail -3000 catalina.out</strong>：查看倒数前3000行的数据；<br><strong>tail -3000 catalina.out | grep ‘AA’</strong>：查看倒数前3000行包含字母’AA’的数据；<br><strong>ctrl+z</strong> 可退出 </p></blockquote><h2 id="查看进程pid"><a href="#查看进程pid" class="headerlink" title="查看进程pid"></a>查看进程pid</h2><p>lsof -i:8080：根据端口查看进程pid:</p><h1 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h1><p>面试官常问的十个linux问题<br><strong>1. 如何暂停一个正在运行的进程，把其放在后台（不运行）？</strong><br>答案：为了停止正在运行的进程，让其在后台运行，我们可以使用组合键 Ctrl+Z。</p><p><strong>2. 什么是安装Linux所需的最小分区数量，以及如何查看系统启动信息？</strong><br>答案：单独一个/root分区足以执行所有的系统任务，但是强烈建议安装Linux时，需要至少三个分区：/root,/boot,/swap。一个IDE硬盘驱动器支持高达63个分区，SCSI硬盘驱动器支持超过15个分区。<br>为了检查启动信息，我们可以使用cat或者dmesg命令，如下所示：</p><pre><code class="java">#cat /var/log/messages</code></pre><p>或者</p><pre><code class="java">#dmesg</code></pre><p><strong>3. 在你的Linux机器上跟踪系统事件的守护进程名是什么？</strong><br>答案：’syslogd’，它负责跟踪系统信息，并将跟踪日志存储在特定的日志文件里。</p><p><strong>4. 在/root分区运行’fsck’命令的最低要求是什么？</strong><br>答案：/root分区必须挂载为只读模式，而不是读写模式</p><p><strong>5. 如何分层复制/home目录到另一个目录？</strong><br>答案：Linux的’cpio’命令起到了效果。’cpio’可以分层地复制文件和目录层次结构到另一个位置。</p><p><strong>6. 在Linux中，怎样实现日志文件的自动替换？</strong><br>答案：’logrotate’提供日志自动替换功能。</p><p><strong>7. 怎样知道Linux中是谁在安排工作？</strong><br>答案：使用’at’命令加上’-l’选项，就可以查出。</p><p><strong>8. 如何在不解压tar包的前提下，查看包里的内容？</strong><br>答案：使用’tar -tvf’。选项‘t’(显示内容)，‘v’（详细报告tar处理的文件信息），‘f’（使用档案文件或者设备）</p><p><strong>9. 什么是页面错误，它是怎么发生的？</strong><br>答案：当一个程序请求内存中不存在的数据时，就会产生页面错误，导致的结果就是程序停止。</p><p><strong>10. 什么是在程序中返回代码？</strong><br>答案：返回代码是shell的特性。返回代码显示了程序的状态，一个成功的程序执行后返回‘0’，&amp;&amp;可以用来决定那个应用程序先执行。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;常考的Linux命令&quot;&gt;&lt;a href=&quot;#常考的Linux命令&quot; class=&quot;headerlink&quot; title=&quot;常考的Linux命令&quot;&gt;&lt;/a&gt;常考的Linux命令&lt;/h1&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://tangguangzhen.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://tangguangzhen.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>node.js的安装</title>
    <link href="https://tangguangzhen.github.io/2019/07/05/node-js%E7%9A%84%E5%AE%89%E8%A3%85/"/>
    <id>https://tangguangzhen.github.io/2019/07/05/node-js的安装/</id>
    <published>2019-07-05T07:40:22.000Z</published>
    <updated>2019-07-05T12:16:13.757Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Node-JS-的安装"><a href="#Node-JS-的安装" class="headerlink" title="Node.JS 的安装"></a>Node.JS 的安装</h1><p>本文将向大家介绍在window安装Node.js的方法。</p><a id="more"></a><p>本安装教程以Node.js v4.4.3 LTS(长期支持版本)版本为例。</p><p>Node.js安装包及源码下载地址为：<a href="https://nodejs.org/en/download/。" target="_blank" rel="noopener">https://nodejs.org/en/download/。</a></p><p><img src="01.jpg" alt="image"></p><p>你可以根据不同平台系统选择你需要的Node.js安装包。</p><h2 id="Node-js-历史版本下载地址：https-nodejs-org-dist"><a href="#Node-js-历史版本下载地址：https-nodejs-org-dist" class="headerlink" title="Node.js 历史版本下载地址：https://nodejs.org/dist/"></a>Node.js 历史版本下载地址：<a href="https://nodejs.org/dist/" target="_blank" rel="noopener">https://nodejs.org/dist/</a></h2><h2 id="Window-上安装Node-js"><a href="#Window-上安装Node-js" class="headerlink" title="Window 上安装Node.js"></a>Window 上安装Node.js</h2><p>Windows 安装包(.msi)</p><p>32 位安装包下载地址 : <a href="https://nodejs.org/dist/v4.4.3/node-v4.4.3-x86.msi" target="_blank" rel="noopener">https://nodejs.org/dist/v4.4.3/node-v4.4.3-x86.msi</a></p><p>64 位安装包下载地址 : <a href="https://nodejs.org/dist/v4.4.3/node-v4.4.3-x64.msi" target="_blank" rel="noopener">https://nodejs.org/dist/v4.4.3/node-v4.4.3-x64.msi</a></p><p>本文实例以 v0.10.26 版本为例，其他版本类似， 安装步骤：</p><p>步骤 1 : 双击下载后的安装包 v0.10.26，如下所示：</p><p><img src="02.png" alt="image"></p><p>步骤 2 : 点击以上的Run(运行)，将出现如下界面：</p><p><img src="03.png" alt="image"></p><p>步骤 3 : 勾选接受协议选项，点击 next（下一步） 按钮 :</p><p><img src="04.png" alt="image"></p><p>步骤 4 : Node.js默认安装目录为 “C:\Program Files\nodejs\” , 你可以修改目录，并点击 next（下一步）：</p><p><img src="05.png" alt="image"></p><p>步骤 5 : 点击树形图标来选择你需要的安装模式 , 然后点击下一步 next（下一步）</p><p><img src="06.png" alt="image"></p><p>步骤 6 :点击 Install（安装） 开始安装Node.js。你也可以点击 Back（返回）来修改先前的配置。 然后并点击 next（下一步）：</p><p><img src="07.png" alt="image"></p><p>安装过程：</p><p><img src="08.png" alt="image"></p><p>点击 Finish（完成）按钮退出安装向导。</p><p><img src="09.png" alt="image"></p><p>检测PATH环境变量是否配置了Node.js，点击开始=》运行=》输入”cmd” =&gt; 输入命令”path”，输出如下结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PATH=C:\oraclexe\app\oracle\product\<span class="number">10.2</span>.0\server\bin;C:\Windows\system32;</span><br><span class="line">C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;</span><br><span class="line">c:\python32\python;C:\MinGW\bin;C:\Program Files\GTK2-Runtime\lib;</span><br><span class="line"></span><br><span class="line">C:\Program Files\MySQL\MySQL Server <span class="number">5.5</span>\bin;C:\Program Files\nodejs\;</span><br><span class="line">C:\Users\rg\AppData\Roaming\npm</span><br></pre></td></tr></table></figure><p>我们可以看到环境变量中已经包含了C:\Program Files\nodejs<br>检查Node.js版本<br><img src="10.png" alt="image"></p><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>至此，node.js安装完成。</p><p>参考博客: <a href="https://www.simon96.online/2018/11/10/hexo-env/" target="_blank" rel="noopener">https://www.simon96.online/2018/11/10/hexo-env/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Node-JS-的安装&quot;&gt;&lt;a href=&quot;#Node-JS-的安装&quot; class=&quot;headerlink&quot; title=&quot;Node.JS 的安装&quot;&gt;&lt;/a&gt;Node.JS 的安装&lt;/h1&gt;&lt;p&gt;本文将向大家介绍在window安装Node.js的方法。&lt;/p&gt;
    
    </summary>
    
      <category term="node.js" scheme="https://tangguangzhen.github.io/categories/node-js/"/>
    
    
      <category term="node.js" scheme="https://tangguangzhen.github.io/tags/node-js/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客搭建</title>
    <link href="https://tangguangzhen.github.io/2019/07/02/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    <id>https://tangguangzhen.github.io/2019/07/02/Hexo博客搭建/</id>
    <published>2019-07-02T12:52:07.000Z</published>
    <updated>2019-07-05T08:26:50.554Z</updated>
    
    <content type="html"><![CDATA[<p>如果你和我一样是小白，从来没搭建过博客。那么恭喜你！看完这篇文章，你也可以拥有一个这样的博客啦！</p><a id="more"></a><h2 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h2><h2 id="搭建本地个人博客"><a href="#搭建本地个人博客" class="headerlink" title="搭建本地个人博客"></a>搭建本地个人博客</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如果你和我一样是小白，从来没搭建过博客。那么恭喜你！看完这篇文章，你也可以拥有一个这样的博客啦！&lt;/p&gt;
    
    </summary>
    
      <category term="hexo" scheme="https://tangguangzhen.github.io/categories/hexo/"/>
    
    
      <category term="hexo" scheme="https://tangguangzhen.github.io/tags/hexo/"/>
    
  </entry>
  
</feed>
