<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[多线程笔试题]]></title>
    <url>%2F2019%2F07%2F31%2F%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%AC%94%E8%AF%95%E9%A2%98%2F</url>
    <content type="text"><![CDATA[同程艺龙JAVA工程师多线程笔试题 笔试题题目问题描述:设计三个线程，三个线程并行执行，要求分别在控制台输入数据后面拼接”_A”，”_B”，”_C”，并且需要保证线程1，线程2，线程3按顺序执行，即线程1执行完成后，再执行线程2，线程2执行完成后再执行线程31.线程运行逻辑：在输入参数中拼接字符串，1号线程拼接”_A”，2号线程拱接_B”， 3号线程拼接”_C”2.程序运行时需要同时启动三个钱程3.线程运行时，需要按照指定顺序运行，1号线程(执行完成) -&gt;2号钱程(执行完威) -&gt;3号线(执行完成)输入描述：字符串输入输入使用Sanner sc = new Sanner(System.in) 获取输入数据输出描述:运算结果输出程序运行结果使用System.out.pintin()输出到控制台输入样例： 1Hello 输出样例： 1Hello_A_B_C 代码实现12345678910111213141516171819202122232425262728293031323334353637import java.util.Scanner;public class Test &#123; static String str; static class WorkersA implements Runnable &#123; public void run() &#123; str += "_A"; System.out.println("正在运行A"); &#125; &#125; static class WorkersB implements Runnable &#123; public void run() &#123; str += "_B"; System.out.println("正在运行B"); &#125; &#125; static class WorkersC implements Runnable &#123; public void run() &#123; str += "_C"; System.out.println("正在运行C"); &#125; &#125; public static void main(String[] args) throws Exception&#123; Scanner sc = new Scanner(System.in); str = sc.nextLine(); Thread thread1 = new Thread(new WorkersA()); thread1.start(); thread1.join();//使得t.join()中的t优先执行，当t执行完后才会执行其他线程。能够使得线程之间的并行执行变成串行执行。 Thread thread2 = new Thread(new WorkersB()); thread2.start(); thread2.join(); Thread thread3 = new Thread(new WorkersC()); thread3.start(); thread3.join(); System.out.println(str); &#125;&#125;]]></content>
      <categories>
        <category>多线程</category>
      </categories>
      <tags>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[计算机网络]]></title>
    <url>%2F2019%2F07%2F10%2F%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[操作系统]]></title>
    <url>%2F2019%2F07%2F08%2F%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%2F</url>
    <content type="text"><![CDATA[进程与线程区别联系：1.进程是系统资源分配的最小单位，线程是程序执行的最小单位；2.进程使用独立的数据空间，线程共享进程的数据空间。 线程调度算法1.时间片轮转调度2.先来先服务调度3.优先级调度4.多级反馈队列调度5.高响应比优先调度]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spring入门（1）]]></title>
    <url>%2F2019%2F07%2F07%2FSpring%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89%2F</url>
    <content type="text"><![CDATA[Spring的概述 什么是Spring？Spring 是一个开源框架Spring 为简化企业级应用开发而生. 使用Spring可以使简单的JavaBean实现以前只有EJB才能实现的功能Spring 是JavaSE/EE的一站式框架 Spring的概述-Spring的优点• 方便解耦，简化开发– Spring就是一个大工厂，可以将所有对象创建和依赖关系维护，交给Spring管理• AOP编程的支持– Spring提供面向切面编程，可以方便的实现对程序进行权限拦截、运行监控等功能• 声明式事务的支持– 只需要通过配置就可以完成对事务的管理，而无需手动编程 • 方便程序的测试– Spring对Junit4支持，可以通过注解方便的测试Spring程序• 方便集成各种优秀框架– Spring不排斥各种优秀的开源框架，其内部提供了对各种优秀框架（如：Struts、Hibernate、 MyBatis等）的直接支持• 降低JavaEE API的使用难度– Spring 对JavaEE开发中非常难用的一些API（JDBC、 JavaMail、远程调用等），都提供了封装，使这些API应用难度大大降低]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[八大经典排序算法]]></title>
    <url>%2F2019%2F07%2F06%2F%E5%85%AB%E5%A4%A7%E7%BB%8F%E5%85%B8%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%2F</url>
    <content type="text"><![CDATA[八大经典排序算法（JAVA版）：冒泡排序、选择排序、插入排序、希尔排序、归并排序、快速排序、堆排序、基数排序 排序算法基础知识术语说明稳定：如果a原本在b前面，而a=b，排序之后a仍然在b的前面；不稳定：如果a原本在b的前面，而a=b，排序之后a可能会出现在b的后面；内排序：所有排序操作都在内存中完成；外排序：因数据量太大，故把数据放在磁盘中，而排序通过磁盘和内存的数据传输才能进行；时间复杂度： 一个算法执行所耗费的时间。空间复杂度：运行完一个程序所需内存的大小。 算法总结图片名词解释：n: 数据规模k: “桶”的个数In-place: 占用常数内存，不占用额外内存Out-place: 占用额外内存 算法分类比较和非比较的区别常见的快速排序、归并排序、堆排序、冒泡排序等属于比较排序。在排序的最终结果里，元素之间的次序依赖于它们之间的比较。每个数都必须和其他数进行比较，才能确定自己的位置。在冒泡排序之类的排序中，问题规模为n，又因为需要比较n次，所以平均时间复杂度为O(n²)。在归并排序、快速排序之类的排序中，问题规模通过分治法消减为logN次，所以时间复杂度平均O(nlogn)。比较排序的优势是，适用于各种规模的数据，也不在乎数据的分布，都能进行排序。可以说，比较排序适用于一切需要排序的情况。计数排序、基数排序、桶排序则属于非比较排序。非比较排序是通过确定每个元素之前，应该有多少个元素来排序。针对数组arr，计算arr之前有多少个元素，则唯一确定了arr在排序后数组中的位置。非比较排序只要确定每个元素之前的已有的元素个数即可，所有一次遍历即可解决。算法时间复杂度O(n)。非比较排序时间复杂度底，但由于非比较排序需要占用空间来确定唯一位置。所以对数据规模和数据分布有一定的要求。 八大排序算法冒泡排序（Bubble Sort）冒泡排序是一种简单的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果它们的顺序错误就把它们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。 算法描述比较相邻的元素。如果第一个比第二个大，就交换它们两个；对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对，这样在最后的元素应该会是最大的数；针对所有的元素重复以上的步骤，除了最后一个；重复步骤1~3，直到排序完成。 动图演示 代码实现12345678910111213141516171819202122//冒泡排序算法public static void bubbleSort(int[] arr) &#123; // 冒泡排序 的时间复杂度 O(n^2), 自己写出 int temp = 0; // 临时变量 boolean flag = false; // 标识变量，表示是否进行过交换 for (int i = 0; i &lt; arr.length - 1; i++) &#123; for (int j = 0; j &lt; arr.length - 1 - i; j++) &#123; // 如果前面的数比后面的数大，则交换 if (arr[j] &gt; arr[j + 1]) &#123; flag = true; temp = arr[j]; arr[j] = arr[j + 1]; arr[j + 1] = temp; &#125; &#125; if (!flag) &#123; // 在一趟排序中，一次交换都没有发生过 break; &#125; else &#123; flag = false; // 重置flag!!!, 进行下次判断 &#125; &#125;&#125; 算法分析最佳情况：T(n) = O(n) 最差情况：T(n) = O(n2) 平均情况：T(n) = O(n2) 选择排序（Selection Sort）表现最稳定的排序算法之一，因为无论什么数据进去都是O(n2)的时间复杂度，所以用到它的时候，数据规模越小越好。唯一的好处可能就是不占用额外的内存空间了吧。选择排序(Selection-sort)是一种简单直观的排序算法。它的工作原理：首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。 算法描述n个记录的直接选择排序可经过n-1趟直接选择排序得到有序结果。具体算法描述如下：初始状态：无序区为R[1..n]，有序区为空；第i趟排序(i=1,2,3…n-1)开始时，当前有序区和无序区分别为R[1..i-1]和R(i..n）。该趟排序从当前无序区中-选出关键字最小的记录 R[k]，将它与无序区的第1个记录R交换，使R[1..i]和R[i+1..n)分别变为记录个数增加1个的新有序区和记录个数减少1个的新无序区；n-1趟结束，数组有序化了。 动图演示 代码实现12345678910111213141516171819//选择排序 public static void selectSort(int[] arr) &#123; //选择排序时间复杂度是 O(n^2) for (int i = 0; i &lt; arr.length - 1; i++) &#123; int minIndex = i; int min = arr[i]; for (int j = i + 1; j &lt; arr.length; j++) &#123; if (min &gt; arr[j]) &#123; // 说明假定的最小值，并不是最小 min = arr[j]; // 重置min minIndex = j; // 重置minIndex &#125; &#125; // 将最小值，放在arr[0], 即交换 if (minIndex != i) &#123; arr[minIndex] = arr[i]; arr[i] = min; &#125; &#125; &#125; 算法分析最佳情况：T(n) = O(n2) 最差情况：T(n) = O(n2) 平均情况：T(n) = O(n2) 插入排序（Insertion Sort）插入排序（Insertion-Sort）的算法描述是一种简单直观的排序算法。它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。插入排序在实现上，通常采用in-place排序（即只需用到O(1)的额外空间的排序），因而在从后向前扫描过程中，需要反复把已排序元素逐步向后挪位，为最新元素提供插入空间。 算法描述一般来说，插入排序都采用in-place在数组上实现。具体算法描述如下：步骤1：从第一个元素开始，该元素可以认为已经被排序；步骤2：取出下一个元素，在已经排序的元素序列中从后向前扫描；步骤3：如果该元素（已排序）大于新元素，将该元素移到下一位置；步骤4：重复步骤3，直到找到已排序的元素小于或者等于新元素的位置；步骤5：将新元素插入到该位置后；重复步骤2~5。 动图演示 代码实现1234567891011121314151617181920212223242526//插入排序 public static void insertSort(int[] arr) &#123; int insertVal = 0; int insertIndex = 0; //使用for循环来把代码简化 for(int i = 1; i &lt; arr.length; i++) &#123; //定义待插入的数 insertVal = arr[i]; insertIndex = i - 1; // 即arr[1]的前面这个数的下标 // 给insertVal 找到插入的位置 // 说明 // 1. insertIndex &gt;= 0 保证在给insertVal 找插入位置，不越界 // 2. insertVal &lt; arr[insertIndex] 待插入的数，还没有找到插入位置 // 3. 就需要将 arr[insertIndex] 后移 while (insertIndex &gt;= 0 &amp;&amp; insertVal &lt; arr[insertIndex]) &#123; arr[insertIndex + 1] = arr[insertIndex]; insertIndex--; &#125; // 当退出while循环时，说明插入的位置找到, insertIndex + 1 // 举例：理解不了，我们一会 debug //这里我们判断是否需要赋值 if(insertIndex + 1 != i) &#123; arr[insertIndex + 1] = insertVal; &#125; &#125; &#125; 算法分析最佳情况：T(n) = O(n) 最坏情况：T(n) = O(n2) 平均情况：T(n) = O(n2) 希尔排序（Shell Sort）希尔排序是希尔（Donald Shell）于1959年提出的一种排序算法。希尔排序也是一种插入排序，它是简单插入排序经过改进之后的一个更高效的版本，也称为缩小增量排序，同时该算法是冲破O(n2）的第一批算法之一。它与插入排序的不同之处在于，它会优先比较距离较远的元素。希尔排序又叫缩小增量排序。希尔排序是把记录按下表的一定增量分组，对每组使用直接插入排序算法排序；随着增量逐渐减少，每组包含的关键词越来越多，当增量减至1时，整个文件恰被分成一组，算法便终止。 算法描述我们来看下希尔排序的基本步骤，在此我们选择增量gap=length/2，缩小增量继续以gap = gap/2的方式，这种增量选择我们可以用一个序列来表示，{n/2,(n/2)/2…1}，称为增量序列。希尔排序的增量序列的选择与证明是个数学难题，我们选择的这个增量序列是比较常用的，也是希尔建议的增量，称为希尔增量，但其实这个增量序列不是最优的。此处我们做示例使用希尔增量。先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，具体算法描述：选择一个增量序列t1，t2，…，tk，其中ti&gt;tj，tk=1；按增量序列个数k，对序列进行k 趟排序；每趟排序，根据对应的增量ti，将待排序列分割成若干长度为m 的子序列，分别对各子表进行直接插入排序。仅增量因子为1 时，整个序列作为一个表来处理，表长度即为整个序列的长度。 动图演示 代码实现1234567891011121314151617181920212223242526272829303132333435363738public static void shellSort(int[] arr) &#123; int temp = 0; int count = 0; // 根据前面的逐步分析，使用循环处理 for (int gap = arr.length / 2; gap &gt; 0; gap /= 2) &#123; for (int i = gap; i &lt; arr.length; i++) &#123; // 遍历各组中所有的元素(共gap组，每组有个元素), 步长gap for (int j = i - gap; j &gt;= 0; j -= gap) &#123; // 如果当前元素大于加上步长后的那个元素，说明交换 if (arr[j] &gt; arr[j + gap]) &#123; temp = arr[j]; arr[j] = arr[j + gap]; arr[j + gap] = temp; &#125; &#125; &#125; &#125; &#125; //对交换式的希尔排序进行优化-&gt;移位法 public static void shellSort2(int[] arr) &#123; // 增量gap, 并逐步的缩小增量 for (int gap = arr.length / 2; gap &gt; 0; gap /= 2) &#123; // 从第gap个元素，逐个对其所在的组进行直接插入排序 for (int i = gap; i &lt; arr.length; i++) &#123; int j = i; int temp = arr[j]; if (arr[j] &lt; arr[j - gap]) &#123; while (j - gap &gt;= 0 &amp;&amp; temp &lt; arr[j - gap]) &#123; //移动 arr[j] = arr[j-gap]; j -= gap; &#125; //当退出while后，就给temp找到插入的位置 arr[j] = temp; &#125; &#125; &#125; &#125; 算法分析最佳情况：T(n) = O(nlog2 n) 最坏情况：T(n) = O(nlog2 n) 平均情况：T(n) =O(nlog2n) 归并排序（Merge Sort）和选择排序一样，归并排序的性能不受输入数据的影响，但表现比选择排序好的多，因为始终都是O(n log n）的时间复杂度。代价是需要额外的内存空间。归并排序是建立在归并操作上的一种有效的排序算法。该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。归并排序是一种稳定的排序方法。将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。若将两个有序表合并成一个有序表，称为2-路归并。 算法描述把长度为n的输入序列分成两个长度为n/2的子序列；对这两个子序列分别采用归并排序；将两个排序好的子序列合并成一个最终的排序序列。 动图演示 代码实现1234567891011121314151617181920212223242526272829303132/**归并排序 * @param array * @return */ public static int[] MergeSort(int[] array) &#123; if (array.length &lt; 2) return array; int mid = array.length / 2; int[] left = Arrays.copyOfRange(array, 0, mid); int[] right = Arrays.copyOfRange(array, mid, array.length); return merge (MergeSort(left), MergeSort (right)); &#125; /** * 归并排序-将两段排序好的数组结合成一个排序数组 * @param 1eft * @param right * @return */ public static int[] merge(int[] left, int[] right) &#123; int[] result = new int[left.length + right. length]; for (int index = 0, i=0, j=0; index &lt; result.length; index++) &#123; if (i&gt;=left.length) result[index] = right[j++]; else if (j &gt;= right.length) result[index] = left[i++]; else if (left[i] &gt; right[j]) result[index] = right[j++]; else result[index] = left[i++]; &#125; return result; &#125; 算法分析最佳情况：T(n) = O(n) 最差情况：T(n) = O(nlogn) 平均情况：T(n) = O(nlogn) 快速排序（Quick Sort）快速排序的基本思想：通过一趟排序将待排记录分隔成独立的两部分，其中一部分记录的关键字均比另一部分的关键字小，则可分别对这两部分记录继续进行排序，以达到整个序列有序。 算法描述快速排序使用分治法来把一个串（list）分为两个子串（sub-lists）。具体算法描述如下：从数列中挑出一个元素，称为 “基准”（pivot）；重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个分区退出之后，该基准就处于数列的中间位置。这个称为分区（partition）操作；递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序。 动图演示 代码实现12345678910111213141516171819202122private static void quickSort(int arr[], int left, int right) &#123; if(left &lt; right)&#123; int mid = partition(arr,left,right); quickSort(arr, left, mid); quickSort(arr, mid+1, right); &#125;&#125;private static int partition(int arr[], int left, int right) &#123; int begin_num = arr[left], i = left, j = right; while(i != j)&#123; while(arr[j] &gt;= begin_num &amp;&amp; i!=j)&#123; j--; &#125; arr[i] = arr[j]; while(arr[i] &lt; begin_num &amp;&amp; i!=j)&#123; i++; &#125; arr[j] = arr[i]; &#125; arr[i] = begin_num; return i;&#125; 算法分析最佳情况：T(n) = O(nlogn) 最差情况：T(n) = O(n2) 平均情况：T(n) = O(nlogn) 堆排序（Heap Sort）堆排序（Heapsort）是指利用堆这种数据结构所设计的一种排序算法。堆积是一个近似完全二叉树的结构，并同时满足堆积的性质：即子结点的键值或索引总是小于（或者大于）它的父节点。 算法描述将初始待排序关键字序列(R1,R2….Rn)构建成大顶堆，此堆为初始的无序区；将堆顶元素R[1]与最后一个元素R[n]交换，此时得到新的无序区(R1,R2,……Rn-1)和新的有序区(Rn),且满足R[1,2…n-1]&lt;=R[n]；由于交换后新的堆顶R[1]可能违反堆的性质，因此需要对当前无序区(R1,R2,……Rn-1)调整为新堆，然后再次将R[1]与无序区最后一个元素交换，得到新的无序区(R1,R2….Rn-2)和新的有序区(Rn-1,Rn)。不断重复此过程直到有序区的元素个数为n-1，则整个排序过程完成。 动图演示 代码实现123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354/** * 构建大顶堆 */ public static void adjustHeap(int[] data,int i, int len) &#123; int temp, j; temp = data[i]; for (j = 2*i+1; j &lt; len; j = 2*j+1) &#123; //j为初始化为节点i的左孩子，沿节点较大的子节点向下调整 if (j &lt; len &amp;&amp; data[j] &lt; data[j + 1]) &#123;//取节点较大的子节点的下标 ++j; //如果节点的右孩子&gt;左孩子，则取右孩子节点的下标 &#125; if (temp &gt;= data[j]) &#123; //根节点 &gt;=左右子女中关键字较大者，调整结束 break; &#125;else&#123; //根节点 &lt;左右子女中关键字较大者 data[i] = data[j]; //将左右子结点中较大值data[j]调整到双亲节点上 i = j; //【关键】修改i值，以便继续向下调整 &#125; &#125; data[i] = temp;//被调整的结点的值放入最终位置 &#125; /** * 堆排序 * 时间复杂度：O（n^2） * @param data */ public static void heapSort(int[] data) &#123; int i; //从最后一个节点array.length-1的父节点（array.length-1-1）/2开始，直到根节点0，反复调整堆 for (i = (data.length-2) / 2; i &gt;= 0; i--) &#123; //构建一个大顶堆 adjustHeap(data, i, data.length - 1); &#125; for (i = data.length - 1; i &gt;= 0; i--) &#123; //将堆顶记录和当前未经排序子序列的最后一个记录交换 int temp = data[0]; data[0] = data[i]; data[i] = temp; adjustHeap(data, 0, i - 1); //将a中前i-1个记录重新调整为大顶堆 &#125; &#125;public static void main(String[] args) &#123; int[] arr=&#123;1,3,2,10,5,11,12,4,9,7&#125;; System.out.println("交换之前："); for(int num:arr)&#123; System.out.print(num+" "); &#125; heapSort(arr); System.out.println(); System.out.println("交换后："); for(int num:arr)&#123; System.out.print(num+" "); &#125; &#125; 算法分析最佳情况：T(n) = O(nlogn) 最差情况：T(n) = O(nlogn) 平均情况：T(n) = O(nlogn) 基数排序基数排序也是非比较的排序算法，对每一位进行排序，从最低位开始排序，复杂度为O(kn),为数组长度，k为数组中的数的最大的位数；基数排序是按照低位先排序，然后收集；再按照高位排序，然后再收集；依次类推，直到最高位。有时候有些属性是有优先级顺序的，先按低优先级排序，再按高优先级排序。最后的次序就是高优先级高的在前，高优先级相同的低优先级高的在前。基数排序基于分别排序，分别收集，所以是稳定的。 算法描述取得数组中的最大数，并取得位数；arr为原始数组，从最低位开始取每个位组成radix数组；对radix进行计数排序（利用计数排序适用于小范围数的特点）； 动图演示 代码实现1234567891011121314151617181920212223242526272829303132333435363738394041424344import java.util.Arrays;class Untitled &#123; public static void main(String[] args) &#123; int[] data = new int[] &#123; 1100, 192, 221, 12, 23 &#125;; print(data); radixSort(data, 10, 4); System.out.println("排序后的数组："); print(data); &#125; public static void radixSort(int[] data, int radix, int d) &#123; // 缓存数组 int[] tmp = new int[data.length]; // buckets用于记录待排序元素的信息 // buckets数组定义了max-min个桶 int[] buckets = new int[radix]; for (int i = 0, rate = 1; i &lt; d; i++) &#123; // 重置count数组，开始统计下一个关键字 Arrays.fill(buckets, 0); // 将data中的元素完全复制到tmp数组中 System.arraycopy(data, 0, tmp, 0, data.length); // 计算每个待排序数据的子关键字 for (int j = 0; j &lt; data.length; j++) &#123; int subKey = (tmp[j] / rate) % radix; buckets[subKey]++; &#125; for (int j = 1; j &lt; radix; j++) &#123; buckets[j] = buckets[j] + buckets[j - 1]; &#125; // 按子关键字对指定的数据进行排序 for (int m = data.length - 1; m &gt;= 0; m--) &#123; int subKey = (tmp[m] / rate) % radix; data[--buckets[subKey]] = tmp[m]; &#125; rate *= radix; &#125; &#125; public static void print(int[] data) &#123; for (int i = 0; i &lt; data.length; i++) &#123; System.out.print(data[i] + "\t"); &#125; System.out.println(); &#125;&#125; 算法分析最佳情况：T(n) = O(n * k) 最差情况：T(n) = O(n * k) 平均情况：T(n) = O(n * k) 结语至此，八大算法都讲解完成，大家有更好地代码可以在评论区发表，欢迎大家批评指正。]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux系统基本操作]]></title>
    <url>%2F2019%2F07%2F06%2FLinux%E7%B3%BB%E7%BB%9F%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%2F</url>
    <content type="text"><![CDATA[常考的Linux命令 cd用于切换当前目录，它的参数是要切换到的目录的路径，可以是绝对路径，也可以是相对路径。 cd /root/runoob/ ：绝对路径cd ./runoob/ ：相对路径 ls查看文件与目录的命令 ls -l (也可以直接 ll ) ：列出长数据串，包含文件的属性与权限数据等ls -a ：列出全部的文件，连同隐藏文件（开头为.的文件）一起列出来（常用） grep文本搜索 语法：grep 参数 查找条件 文件名（注：是文件名，目录名下查找不行）主要参数：－i：不区分大小写(只适用于字母字符。）－l：查询多文件时只输出包含匹配字符的文件名。－n：显示匹配行内容及行号。比如我的/opt目录下有文件test1.txtgrep -i “teacher” test1.txt : 查询包含 teacher 文本的所有行并打印在屏幕上grep -l “teacher” test1.txt test2.txt : 在文件test1/test2中查找是否有“teacher”grep teacher *.txt : 显示当前目录下包含“teacher”且以.txt 结尾的文件（grep命令支持正则表达式，如 grep ‘[a-z]{7}‘ *.txt）ps -ef | grep java：查找指定进程(这里指定java进程)ls -l | grep -i test：把ls -l的输出中包含字母test（不区分大小写）的内容输出 （如果查询的是目录可以使用正则表达式，但是文件不行） find查找 -mtime +n : 列出在n天之前（不含n天本身）被更改过的文件名；-mtime -n : 列出在n天之内（含n天本身）被更改过的文件名；find /root（路径） -mtime 0 ： 在当前目录下查找今天之内有改动的文件find -name 文件名 ：找匹配的文件名在某一文件中查找日志（比方方法login）:可以vi打开日志文件，然后“/login”，enter，按 n 键向下继续搜索； mkdir创建指定的名称的目录 -m, –mode=模式，设定权限&lt;模式&gt; (类似 chmod)，而不是 rwxrwxrwx 减 umask-p, –parents 可以是一个路径名称。此时若路径中的某些目录尚不存在,加上此选项后,系统将自动建立好那些尚不存在的目录,即一次可以建立多个目录;mkdir test1 ： 创建一个空目录mkdir -p test2/test22 ：递归创建多个目录mkdir -m 777 test3 ：创建权限为777的目录 cp复制文件，还可以把多个文件一次性地复制到一个目录下 cp -a file1 file2 ：连同文件的所有特性把文件file1复制成文件file2cp file1 file2 file3 dir ：把文件file1、file2、file3复制到目录dir中 mv移动文件、目录或更名 mv file1 file2 file3 dir : 把文件file1、file2、file3移动到目录dir中mv file1 file2 : 把文件file1重命名为file2 rm删除文件或目录 -f：就是force的意思，忽略不存在的文件，不会出现警告消息-i：互动模式，在删除前会询问用户是否操作-r：递归删除，最常用于目录删除，它是一个非常危险的参数rm -i file : 删除文件file，在删除之前会询问是否进行该操作rm -fr dir : 强制删除目录dir中的所有文件 ps列出系统中当前运行的进程 a 显示所有用户的所有进程（包括其它用户）-e 显示所有进程,环境变量f 用树形格式来显示进程；ps -ef | grep java ： 找出所有java进程 kill终止指定的进程。需要先使用ps/pidof/pstree/top等工具获取进程PID，然后使用kill命令来杀掉该进程。 kill -9 进程号 ： 彻底杀死某个进程 tar对文件进行打包，默认情况并不会压缩，如果指定了相应的参数，它还会调用相应的压缩程序（如gzip和bzip等）进行压缩和解压。 语法：tar [主选项+辅选项] 文件或者目录使用该命令时，主选项是必须要有的，它告诉tar要做什么事情，辅选项是辅助使用的，可以选用。 主选项： c 创建新的档案文件。如果用户想备份一个目录或是一些文件，就要选择这个选项。相当于打包。x 从档案文件中释放文件。相当于拆包。t 列出档案文件的内容，查看已经备份了哪些文件。**在参数的下达中， c/x/t 仅能存在一个！不可同时存在！因为不可能同时压缩与解压缩。 辅助选项： -z ：是否同时具有 gzip 的属性？亦即是否需要用 gzip 压缩或解压？ 一般格式为xx.tar.gz或xx. tgz-j ：是否同时具有 bzip2 的属性？亦即是否需要用 bzip2 压缩或解压？一般格式为xx.tar.bz2-v ：压缩的过程中显示文件！这个常用-f ：使用档名，请留意，在 f 之后要立即接档名喔！不要再加其他参数！-p ：使用原文件的原来属性（属性不会依据使用者而变）–exclude FILE：在压缩的过程中，不要将 FILE 打包！压缩：tar -jcv -f filename.tar.bz2 filename查询：tar -jtv -f filename.tar.bz2解压：tar -jxv -f filename.tar.bz2 (解压成目录为filename的目录)注：文件名并不定要以后缀tar.bz2结尾，这里主要是为了说明使用的压缩程序为bzip2 chmod改变文件的权限 语法：chmod [options] mode filesoptions：-R 可递归遍历子目录，把修改应到目录下所有文件和子目录who：u 用户 、 g 组 、o 其他 、a 所有用户opcode：+ 增加权限 、 - 删除权限 、= 重新分配权限permission： r 读 、w 写 、 x 执行我们多数用三位八进制数字的形式来表示权限，第一位指定属主的权限，第二位指定组权限，第三位指定其他用户的权限，每位通过4(读)、2(写)、1(执行)三种数值的和来确定权限。如6(4+2)代表有读写权，7(4+2+1)有读、写和执行的权限chmod u+x file ：给file的属主增加执行权限chmod 751 file ：给file的属主分配读、写、执行(7)的权限，给file的所在组分配读、执行(5)的权限，给其他用户分配执行(1)的权限chmod u=rwx,g=rx,o=x file ：上例的另一种形式 tail查阅正在改变的日志文件 语法：tail[必要参数][选择参数][文件]-f 循环读取-n&lt;行数&gt; 显示行数tail -f 20160921.logs ：查看正在改变的日志文件；tail -3000 catalina.out：查看倒数前3000行的数据；tail -3000 catalina.out | grep ‘AA’：查看倒数前3000行包含字母’AA’的数据；ctrl+z 可退出 查看进程pidlsof -i:8080：根据端口查看进程pid: 面试题面试官常问的十个linux问题1. 如何暂停一个正在运行的进程，把其放在后台（不运行）？答案：为了停止正在运行的进程，让其在后台运行，我们可以使用组合键 Ctrl+Z。 2. 什么是安装Linux所需的最小分区数量，以及如何查看系统启动信息？答案：单独一个/root分区足以执行所有的系统任务，但是强烈建议安装Linux时，需要至少三个分区：/root,/boot,/swap。一个IDE硬盘驱动器支持高达63个分区，SCSI硬盘驱动器支持超过15个分区。为了检查启动信息，我们可以使用cat或者dmesg命令，如下所示： #cat /var/log/messages 或者 #dmesg 3. 在你的Linux机器上跟踪系统事件的守护进程名是什么？答案：’syslogd’，它负责跟踪系统信息，并将跟踪日志存储在特定的日志文件里。 4. 在/root分区运行’fsck’命令的最低要求是什么？答案：/root分区必须挂载为只读模式，而不是读写模式 5. 如何分层复制/home目录到另一个目录？答案：Linux的’cpio’命令起到了效果。’cpio’可以分层地复制文件和目录层次结构到另一个位置。 6. 在Linux中，怎样实现日志文件的自动替换？答案：’logrotate’提供日志自动替换功能。 7. 怎样知道Linux中是谁在安排工作？答案：使用’at’命令加上’-l’选项，就可以查出。 8. 如何在不解压tar包的前提下，查看包里的内容？答案：使用’tar -tvf’。选项‘t’(显示内容)，‘v’（详细报告tar处理的文件信息），‘f’（使用档案文件或者设备） 9. 什么是页面错误，它是怎么发生的？答案：当一个程序请求内存中不存在的数据时，就会产生页面错误，导致的结果就是程序停止。 10. 什么是在程序中返回代码？答案：返回代码是shell的特性。返回代码显示了程序的状态，一个成功的程序执行后返回‘0’，&amp;&amp;可以用来决定那个应用程序先执行。]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[node.js的安装]]></title>
    <url>%2F2019%2F07%2F05%2Fnode-js%E7%9A%84%E5%AE%89%E8%A3%85%2F</url>
    <content type="text"><![CDATA[Node.JS 的安装本文将向大家介绍在window安装Node.js的方法。 本安装教程以Node.js v4.4.3 LTS(长期支持版本)版本为例。 Node.js安装包及源码下载地址为：https://nodejs.org/en/download/。 你可以根据不同平台系统选择你需要的Node.js安装包。 Node.js 历史版本下载地址：https://nodejs.org/dist/Window 上安装Node.jsWindows 安装包(.msi) 32 位安装包下载地址 : https://nodejs.org/dist/v4.4.3/node-v4.4.3-x86.msi 64 位安装包下载地址 : https://nodejs.org/dist/v4.4.3/node-v4.4.3-x64.msi 本文实例以 v0.10.26 版本为例，其他版本类似， 安装步骤： 步骤 1 : 双击下载后的安装包 v0.10.26，如下所示： 步骤 2 : 点击以上的Run(运行)，将出现如下界面： 步骤 3 : 勾选接受协议选项，点击 next（下一步） 按钮 : 步骤 4 : Node.js默认安装目录为 “C:\Program Files\nodejs\” , 你可以修改目录，并点击 next（下一步）： 步骤 5 : 点击树形图标来选择你需要的安装模式 , 然后点击下一步 next（下一步） 步骤 6 :点击 Install（安装） 开始安装Node.js。你也可以点击 Back（返回）来修改先前的配置。 然后并点击 next（下一步）： 安装过程： 点击 Finish（完成）按钮退出安装向导。 检测PATH环境变量是否配置了Node.js，点击开始=》运行=》输入”cmd” =&gt; 输入命令”path”，输出如下结果： 123456PATH=C:\oraclexe\app\oracle\product\10.2.0\server\bin;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;c:\python32\python;C:\MinGW\bin;C:\Program Files\GTK2-Runtime\lib; C:\Program Files\MySQL\MySQL Server 5.5\bin;C:\Program Files\nodejs\;C:\Users\rg\AppData\Roaming\npm 我们可以看到环境变量中已经包含了C:\Program Files\nodejs检查Node.js版本 结语至此，node.js安装完成。 参考博客: https://www.simon96.online/2018/11/10/hexo-env/]]></content>
      <categories>
        <category>node.js</category>
      </categories>
      <tags>
        <tag>node.js</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo博客搭建]]></title>
    <url>%2F2019%2F07%2F02%2FHexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[如果你和我一样是小白，从来没搭建过博客。那么恭喜你！看完这篇文章，你也可以拥有一个这样的博客啦！ 准备环境搭建本地个人博客]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
